// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: PixelStarcraft.proto

/*
	Package usercmd is a generated protocol buffer package.

	It is generated from these files:
		PixelStarcraft.proto

	It has these top-level messages:
		GamePlayer
		Dictionary
		BattleData
		ChooseCal
		BattleResult
*/
package usercmd

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type MsgTypeWzb int32

const (
	MsgTypeWzb_login_REQ   MsgTypeWzb = 0
	MsgTypeWzb_login_CNF   MsgTypeWzb = 1
	MsgTypeWzb_match_REQ   MsgTypeWzb = 2
	MsgTypeWzb_match_CNF   MsgTypeWzb = 3
	MsgTypeWzb_action_REQ  MsgTypeWzb = 4
	MsgTypeWzb_action_CNF  MsgTypeWzb = 5
	MsgTypeWzb_action      MsgTypeWzb = 6
	MsgTypeWzb_deactiv_REQ MsgTypeWzb = 7
	MsgTypeWzb_deactiv_CNF MsgTypeWzb = 8
	MsgTypeWzb_reserved1   MsgTypeWzb = 9
	MsgTypeWzb_reserved2   MsgTypeWzb = 10
	MsgTypeWzb_reserved3   MsgTypeWzb = 11
)

var MsgTypeWzb_name = map[int32]string{
	0:  "login_REQ",
	1:  "login_CNF",
	2:  "match_REQ",
	3:  "match_CNF",
	4:  "action_REQ",
	5:  "action_CNF",
	6:  "action",
	7:  "deactiv_REQ",
	8:  "deactiv_CNF",
	9:  "reserved1",
	10: "reserved2",
	11: "reserved3",
}
var MsgTypeWzb_value = map[string]int32{
	"login_REQ":   0,
	"login_CNF":   1,
	"match_REQ":   2,
	"match_CNF":   3,
	"action_REQ":  4,
	"action_CNF":  5,
	"action":      6,
	"deactiv_REQ": 7,
	"deactiv_CNF": 8,
	"reserved1":   9,
	"reserved2":   10,
	"reserved3":   11,
}

func (x MsgTypeWzb) String() string {
	return proto.EnumName(MsgTypeWzb_name, int32(x))
}
func (MsgTypeWzb) EnumDescriptor() ([]byte, []int) { return fileDescriptorPixelStarcraft, []int{0} }

// 玩家信息
type GamePlayer struct {
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	IsHuman  bool   `protobuf:"varint,2,opt,name=isHuman,proto3" json:"isHuman,omitempty"`
}

func (m *GamePlayer) Reset()                    { *m = GamePlayer{} }
func (m *GamePlayer) String() string            { return proto.CompactTextString(m) }
func (*GamePlayer) ProtoMessage()               {}
func (*GamePlayer) Descriptor() ([]byte, []int) { return fileDescriptorPixelStarcraft, []int{0} }

func (m *GamePlayer) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *GamePlayer) GetIsHuman() bool {
	if m != nil {
		return m.IsHuman
	}
	return false
}

type Dictionary struct {
	Key uint32 `protobuf:"varint,1,opt,name=key,proto3" json:"key,omitempty"`
	Num uint32 `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
}

func (m *Dictionary) Reset()                    { *m = Dictionary{} }
func (m *Dictionary) String() string            { return proto.CompactTextString(m) }
func (*Dictionary) ProtoMessage()               {}
func (*Dictionary) Descriptor() ([]byte, []int) { return fileDescriptorPixelStarcraft, []int{1} }

func (m *Dictionary) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *Dictionary) GetNum() uint32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type BattleData struct {
	Troops []*Dictionary `protobuf:"bytes,1,rep,name=troops" json:"troops,omitempty"`
}

func (m *BattleData) Reset()                    { *m = BattleData{} }
func (m *BattleData) String() string            { return proto.CompactTextString(m) }
func (*BattleData) ProtoMessage()               {}
func (*BattleData) Descriptor() ([]byte, []int) { return fileDescriptorPixelStarcraft, []int{2} }

func (m *BattleData) GetTroops() []*Dictionary {
	if m != nil {
		return m.Troops
	}
	return nil
}

type ChooseCal struct {
	IsCal bool `protobuf:"varint,1,opt,name=isCal,proto3" json:"isCal,omitempty"`
}

func (m *ChooseCal) Reset()                    { *m = ChooseCal{} }
func (m *ChooseCal) String() string            { return proto.CompactTextString(m) }
func (*ChooseCal) ProtoMessage()               {}
func (*ChooseCal) Descriptor() ([]byte, []int) { return fileDescriptorPixelStarcraft, []int{3} }

func (m *ChooseCal) GetIsCal() bool {
	if m != nil {
		return m.IsCal
	}
	return false
}

type BattleResult struct {
	RoundNum   uint32        `protobuf:"varint,1,opt,name=roundNum,proto3" json:"roundNum,omitempty"`
	IsWin      bool          `protobuf:"varint,2,opt,name=isWin,proto3" json:"isWin,omitempty"`
	IsFinished bool          `protobuf:"varint,5,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	MakeDamage []*Dictionary `protobuf:"bytes,3,rep,name=makeDamage" json:"makeDamage,omitempty"`
	TakeDamage []*Dictionary `protobuf:"bytes,4,rep,name=takeDamage" json:"takeDamage,omitempty"`
	SpecNum    []*Dictionary `protobuf:"bytes,6,rep,name=specNum" json:"specNum,omitempty"`
}

func (m *BattleResult) Reset()                    { *m = BattleResult{} }
func (m *BattleResult) String() string            { return proto.CompactTextString(m) }
func (*BattleResult) ProtoMessage()               {}
func (*BattleResult) Descriptor() ([]byte, []int) { return fileDescriptorPixelStarcraft, []int{4} }

func (m *BattleResult) GetRoundNum() uint32 {
	if m != nil {
		return m.RoundNum
	}
	return 0
}

func (m *BattleResult) GetIsWin() bool {
	if m != nil {
		return m.IsWin
	}
	return false
}

func (m *BattleResult) GetIsFinished() bool {
	if m != nil {
		return m.IsFinished
	}
	return false
}

func (m *BattleResult) GetMakeDamage() []*Dictionary {
	if m != nil {
		return m.MakeDamage
	}
	return nil
}

func (m *BattleResult) GetTakeDamage() []*Dictionary {
	if m != nil {
		return m.TakeDamage
	}
	return nil
}

func (m *BattleResult) GetSpecNum() []*Dictionary {
	if m != nil {
		return m.SpecNum
	}
	return nil
}

func init() {
	proto.RegisterType((*GamePlayer)(nil), "usercmd.GamePlayer")
	proto.RegisterType((*Dictionary)(nil), "usercmd.Dictionary")
	proto.RegisterType((*BattleData)(nil), "usercmd.BattleData")
	proto.RegisterType((*ChooseCal)(nil), "usercmd.ChooseCal")
	proto.RegisterType((*BattleResult)(nil), "usercmd.BattleResult")
	proto.RegisterEnum("usercmd.MsgTypeWzb", MsgTypeWzb_name, MsgTypeWzb_value)
}
func (m *GamePlayer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GamePlayer) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Username) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintPixelStarcraft(dAtA, i, uint64(len(m.Username)))
		i += copy(dAtA[i:], m.Username)
	}
	if m.IsHuman {
		dAtA[i] = 0x10
		i++
		if m.IsHuman {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Dictionary) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Dictionary) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Key != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPixelStarcraft(dAtA, i, uint64(m.Key))
	}
	if m.Num != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintPixelStarcraft(dAtA, i, uint64(m.Num))
	}
	return i, nil
}

func (m *BattleData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleData) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Troops) > 0 {
		for _, msg := range m.Troops {
			dAtA[i] = 0xa
			i++
			i = encodeVarintPixelStarcraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *ChooseCal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChooseCal) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.IsCal {
		dAtA[i] = 0x8
		i++
		if m.IsCal {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *BattleResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BattleResult) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.RoundNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintPixelStarcraft(dAtA, i, uint64(m.RoundNum))
	}
	if m.IsWin {
		dAtA[i] = 0x10
		i++
		if m.IsWin {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.MakeDamage) > 0 {
		for _, msg := range m.MakeDamage {
			dAtA[i] = 0x1a
			i++
			i = encodeVarintPixelStarcraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.TakeDamage) > 0 {
		for _, msg := range m.TakeDamage {
			dAtA[i] = 0x22
			i++
			i = encodeVarintPixelStarcraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.IsFinished {
		dAtA[i] = 0x28
		i++
		if m.IsFinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.SpecNum) > 0 {
		for _, msg := range m.SpecNum {
			dAtA[i] = 0x32
			i++
			i = encodeVarintPixelStarcraft(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64PixelStarcraft(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32PixelStarcraft(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintPixelStarcraft(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GamePlayer) Size() (n int) {
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovPixelStarcraft(uint64(l))
	}
	if m.IsHuman {
		n += 2
	}
	return n
}

func (m *Dictionary) Size() (n int) {
	var l int
	_ = l
	if m.Key != 0 {
		n += 1 + sovPixelStarcraft(uint64(m.Key))
	}
	if m.Num != 0 {
		n += 1 + sovPixelStarcraft(uint64(m.Num))
	}
	return n
}

func (m *BattleData) Size() (n int) {
	var l int
	_ = l
	if len(m.Troops) > 0 {
		for _, e := range m.Troops {
			l = e.Size()
			n += 1 + l + sovPixelStarcraft(uint64(l))
		}
	}
	return n
}

func (m *ChooseCal) Size() (n int) {
	var l int
	_ = l
	if m.IsCal {
		n += 2
	}
	return n
}

func (m *BattleResult) Size() (n int) {
	var l int
	_ = l
	if m.RoundNum != 0 {
		n += 1 + sovPixelStarcraft(uint64(m.RoundNum))
	}
	if m.IsWin {
		n += 2
	}
	if len(m.MakeDamage) > 0 {
		for _, e := range m.MakeDamage {
			l = e.Size()
			n += 1 + l + sovPixelStarcraft(uint64(l))
		}
	}
	if len(m.TakeDamage) > 0 {
		for _, e := range m.TakeDamage {
			l = e.Size()
			n += 1 + l + sovPixelStarcraft(uint64(l))
		}
	}
	if m.IsFinished {
		n += 2
	}
	if len(m.SpecNum) > 0 {
		for _, e := range m.SpecNum {
			l = e.Size()
			n += 1 + l + sovPixelStarcraft(uint64(l))
		}
	}
	return n
}

func sovPixelStarcraft(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozPixelStarcraft(x uint64) (n int) {
	return sovPixelStarcraft(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GamePlayer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPixelStarcraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GamePlayer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GamePlayer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsHuman", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsHuman = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPixelStarcraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Dictionary) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPixelStarcraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Dictionary: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Dictionary: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			m.Key = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Key |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Num", wireType)
			}
			m.Num = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Num |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipPixelStarcraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPixelStarcraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Troops", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Troops = append(m.Troops, &Dictionary{})
			if err := m.Troops[len(m.Troops)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPixelStarcraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChooseCal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPixelStarcraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChooseCal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChooseCal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsCal", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsCal = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipPixelStarcraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BattleResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPixelStarcraft
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BattleResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BattleResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundNum", wireType)
			}
			m.RoundNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RoundNum |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsWin", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsWin = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MakeDamage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MakeDamage = append(m.MakeDamage, &Dictionary{})
			if err := m.MakeDamage[len(m.MakeDamage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakeDamage", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakeDamage = append(m.TakeDamage, &Dictionary{})
			if err := m.TakeDamage[len(m.TakeDamage)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFinished = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpecNum", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpecNum = append(m.SpecNum, &Dictionary{})
			if err := m.SpecNum[len(m.SpecNum)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPixelStarcraft(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPixelStarcraft
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPixelStarcraft(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPixelStarcraft
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPixelStarcraft
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthPixelStarcraft
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowPixelStarcraft
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipPixelStarcraft(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthPixelStarcraft = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPixelStarcraft   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("PixelStarcraft.proto", fileDescriptorPixelStarcraft) }

var fileDescriptorPixelStarcraft = []byte{
	// 425 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xc1, 0x6e, 0xd3, 0x4c,
	0x14, 0x85, 0x3b, 0x4d, 0xe3, 0x24, 0x37, 0x7f, 0x7e, 0xac, 0xa1, 0x0b, 0x8b, 0x85, 0x15, 0xbc,
	0x8a, 0x40, 0x44, 0xd0, 0xac, 0xd8, 0x26, 0xa1, 0xb0, 0xa1, 0x2a, 0x06, 0x89, 0x65, 0x75, 0x6b,
	0x5f, 0x92, 0x51, 0x3d, 0x9e, 0x68, 0x66, 0x5c, 0x08, 0x4f, 0xc1, 0x43, 0xb1, 0x60, 0xc9, 0x23,
	0xa0, 0xf0, 0x14, 0xec, 0xd0, 0x8c, 0x93, 0xda, 0x9b, 0xb2, 0x9b, 0xef, 0xde, 0x73, 0xce, 0x9c,
	0x91, 0x06, 0x4e, 0x2f, 0xc5, 0x17, 0x2a, 0xde, 0x5b, 0xd4, 0x99, 0xc6, 0x4f, 0x76, 0xba, 0xd1,
	0xca, 0x2a, 0xde, 0xab, 0x0c, 0xe9, 0x4c, 0xe6, 0xc9, 0x1c, 0xe0, 0x35, 0x4a, 0xba, 0x2c, 0x70,
	0x4b, 0x9a, 0x3f, 0x82, 0xbe, 0x5b, 0x94, 0x28, 0x29, 0x62, 0x63, 0x36, 0x19, 0xa4, 0x77, 0xcc,
	0x23, 0xe8, 0x09, 0xf3, 0xa6, 0x92, 0x58, 0x46, 0xc7, 0x63, 0x36, 0xe9, 0xa7, 0x07, 0x4c, 0x9e,
	0x03, 0x2c, 0x45, 0x66, 0x85, 0x2a, 0x51, 0x6f, 0x79, 0x08, 0x9d, 0x1b, 0xda, 0x7a, 0xfb, 0x28,
	0x75, 0x47, 0x37, 0x29, 0x2b, 0xe9, 0x5d, 0xa3, 0xd4, 0x1d, 0x93, 0x97, 0x00, 0x73, 0xb4, 0xb6,
	0xa0, 0x25, 0x5a, 0xe4, 0x4f, 0x21, 0xb0, 0x5a, 0xa9, 0x8d, 0x89, 0xd8, 0xb8, 0x33, 0x19, 0x9e,
	0x3d, 0x9c, 0xee, 0xdb, 0x4d, 0x9b, 0xd8, 0x74, 0x2f, 0x49, 0x1e, 0xc3, 0x60, 0xb1, 0x56, 0xca,
	0xd0, 0x02, 0x0b, 0x7e, 0x0a, 0x5d, 0x61, 0x16, 0x58, 0xf8, 0xdb, 0xfa, 0x69, 0x0d, 0xc9, 0x1f,
	0x06, 0xff, 0xd5, 0xf1, 0x29, 0x99, 0xaa, 0xb0, 0xee, 0x59, 0x5a, 0x55, 0x65, 0x7e, 0x51, 0xc9,
	0x7d, 0xaf, 0x3b, 0xae, 0x23, 0x3e, 0x8a, 0xc3, 0xa3, 0x6a, 0xe0, 0x33, 0x00, 0x89, 0x37, 0xb4,
	0x44, 0x89, 0x2b, 0x8a, 0x3a, 0xf7, 0xd7, 0x6a, 0xc9, 0x9c, 0xc9, 0x36, 0xa6, 0x93, 0x7f, 0x98,
	0x1a, 0x19, 0x8f, 0x01, 0x84, 0x39, 0x17, 0xa5, 0x30, 0x6b, 0xca, 0xa3, 0xae, 0x2f, 0xd1, 0x9a,
	0xf0, 0x67, 0xd0, 0x33, 0x1b, 0xca, 0x5c, 0xf5, 0xe0, 0xfe, 0xc4, 0x83, 0xe6, 0xc9, 0x77, 0x06,
	0xc3, 0xb7, 0x66, 0xf5, 0x61, 0xbb, 0xa1, 0xab, 0xcf, 0x5f, 0xaf, 0xf9, 0x08, 0x06, 0x85, 0x5a,
	0x89, 0xf2, 0x2a, 0x7d, 0xf5, 0x2e, 0x3c, 0x6a, 0x70, 0x71, 0x71, 0x1e, 0x32, 0x87, 0x12, 0x6d,
	0xb6, 0xf6, 0xdb, 0xe3, 0x06, 0xdd, 0xb6, 0xc3, 0xff, 0x07, 0x40, 0x7f, 0x83, 0x5f, 0x9f, 0xb4,
	0xd8, 0xed, 0xbb, 0x1c, 0x20, 0xa8, 0x39, 0x0c, 0xf8, 0x03, 0x18, 0xe6, 0xe4, 0xe8, 0xd6, 0x8b,
	0x7b, 0xed, 0x81, 0x53, 0xf7, 0x5d, 0xb8, 0x26, 0x43, 0xfa, 0x96, 0xf2, 0x17, 0xe1, 0xa0, 0x8d,
	0x67, 0x21, 0xb4, 0x71, 0x16, 0x0e, 0xe7, 0xe1, 0x8f, 0x5d, 0xcc, 0x7e, 0xee, 0x62, 0xf6, 0x6b,
	0x17, 0xb3, 0x6f, 0xbf, 0xe3, 0xa3, 0xeb, 0xc0, 0x7f, 0xdc, 0xd9, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xa0, 0x87, 0xd1, 0xb3, 0xd0, 0x02, 0x00, 0x00,
}
